How to install icecream
=======================

cd kdenonbeta/icecream/icecream
(make -f Makefile.cvs)
./configure --prefix=/opt/icecream
make
make install

WARNING: Make sure you specify a prefix, otherwise icecream
might override your gcc installation!

How to use icecream
===================

You need:

- One machine that runs the scheduler ("./scheduler &")
- Many machines that run the daemon ("./iceccd &")

If you want to compile using icecream, make sure $prefix/bin 
is the first first entry in your path, e.g. type

export PATH=/opt/icecream/bin:$PATH

Then you just compile with make -j <num>, where <num> is the amount
of jobs you want to compile in parallel. Don't exaggerate. Numbers
>15 normally cause trouble.

WARNING: Never use icecream in untrusted environments. 

If you want funny stats, you might want to run "icemon".

Enjoy!

Using icecream in heterogeneous environments
===========================================

If you are running icecream daemons in the same icecream network but on machines
with incompatible compiler versions you have to tell icecream which environment
you are using. Use

  create-env

to create an archive file containing all the files necessary to setup the
compiler environment. The file will have a random unique name like
"ddaea39ca1a7c88522b185eca04da2d8.tar.bz2" per default. Rename it to something
more expressive for your convenience, e.g. "i386-3.3.1.tar.bz2". Set

  ICECC_VERSION=<filename_of_archive_containing_your_environment>

in the shell environment where you start the compile jobs and the file will be
transfered to the daemons where your compile jobs run and installed to a chroot
environment for executing the compile jobs in the environment fitting to the
environment of the client. This requires that the icecream deamon runs as root.

How to combine icecream with ccache
===================================

The easiest way to use ccache with icecream is putting the symlink masquerades
into /opt/icream/bin and putting small wrapper scripts in /opt/ccache/bin

cat /opt/ccache/bin/g++:
#! /bin/sh

export CCACHE_PATH=/opt/icecream/bin
export PATH=/opt/icecream/bin:/usr/bin:$PATH
ccache g++ "$@"

Then you can replace /opt/icecream/bin with /opt/ccache/bin in your $PATH
and all icecream calls will go through ccache (and Qt will compile in 62s :)

Debug output
============

You can use the environment variable ICECC_DEBUG to control if icecream gives
debug output or not. Set it to "debug" to get debug output.

